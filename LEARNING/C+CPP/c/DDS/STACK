//bASIC Implementation of Stack

#include <stdio.h>

struct stack {
    int top;
    int size;
    int* arr;
};

int isEmpty(struct stack* sp) {
    return sp->top == -1;
}

int isFull(struct stack* sp) {
    return sp->top == sp->size - 1;
}

void push(struct stack* sp, int item) {
    if (isFull(sp)) {
        printf("Stack is full\n");
        return;
    }
    sp->arr[++(sp->top)] = item;
    printf("Pushed %d onto the stack\n", item);
}

int pop(struct stack* sp) {
    if (isEmpty(sp)) {
        printf("Stack is empty\n");
        return -1;
    }
    printf("Popped %d from the stack\n", sp->arr[sp->top]);
    return sp->arr[sp->top--];
}

int peek(struct stack* sp) {
    if (isEmpty(sp)) {
        printf("Stack is empty\n");
        return -1;
    }
    printf("Top element is %d\n", sp->arr[sp->top]);
    return sp->arr[sp->top];
}

int main() {
    struct stack* sp = (struct stack*)malloc(sizeof(struct stack));
    if (sp == NULL) {
        printf("Memory allocation failed\n");
        return -1;
    }
    sp->size = 5;
    sp->top = -1;
    sp->arr = (int*)malloc(sp->size * sizeof(int));
    if (sp->arr == NULL) {
        printf("Memory allocation failed\n");
        return -1;
    }
    printf("Stack has been created\n");
    printf("Before pushing, full: %d\n", isFull(sp));
    printf("Before pushing, empty: %d\n", isEmpty(sp));
    
    push(sp, 1);
    push(sp, 2);
    push(sp, 3);
    push(sp, 4);
    push(sp, 5);
    printf("After pushing, full: %d\n", isFull(sp));
    printf("After pushing, empty: %d\n", isEmpty(sp));

    printf("popped %d from the stack\n", pop(sp));
    printf("popped %d from the stack\n", pop(sp));
    printf("popped %d from the stack\n", pop(sp));

    printf("After popping, full: %d\n", isFull(sp));
    printf("After popping, empty: %d\n", isEmpty(sp));

    for (int i = 0; i <= sp->top; i++) {
        printf("%d ", sp->arr[i]);
    }
    printf("\n");
    return 0;
}
